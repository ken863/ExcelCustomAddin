## moved to Docker/Dockerfile
FROM node:18-alpine

# Metadata
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.0

LABEL maintainer="Excel Custom Add-in Team" \
      org.opencontainers.image.title="Excel Custom Add-in" \
      org.opencontainers.image.description="Advanced worksheet management and image tools for Excel workbooks" \
      org.opencontainers.image.version=${VERSION} \
      org.opencontainers.image.created=${BUILD_DATE} \
      org.opencontainers.image.revision=${VCS_REF} \
      org.opencontainers.image.url="https://github.com/ken863/ExcelCustomAddin" \
      org.opencontainers.image.source="https://github.com/ken863/ExcelCustomAddin" \
      org.opencontainers.image.vendor="Excel Custom Add-in Team" \
      org.opencontainers.image.licenses="MIT"

# Thiáº¿t láº­p proxy arguments
ARG HTTP_PROXY
ARG HTTPS_PROXY
ARG http_proxy
ARG https_proxy

# Set proxy environment variables
ENV HTTP_PROXY=${HTTP_PROXY}
ENV HTTPS_PROXY=${HTTPS_PROXY}
ENV http_proxy=${http_proxy}
ENV https_proxy=${https_proxy}

# Thiáº¿t láº­p thÆ° má»¥c lÃ m viá»‡c
WORKDIR /app

# Táº¡o user non-root cho security vÃ  cáº¥u hÃ¬nh sudo
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodeuser -u 1001 && \
    echo 'nodeuser ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers

# CÃ i Ä‘áº·t cÃ¡c dependencies há»‡ thá»‘ng cáº§n thiáº¿t
RUN apk add --no-cache \
    openssl \
    ca-certificates \
    dumb-init \
    wget \
    git \
    python3 \
    make \
    g++ \
    sudo

# Copy toÃ n bá»™ context Ä‘á»ƒ cÃ³ thá»ƒ copy certificates náº¿u cÃ³
COPY . /tmp/build-context/

# Copy certificates náº¿u cÃ³ vÃ  cáº¥u hÃ¬nh npm cho proxy environment
RUN if ls /tmp/build-context/*.crt 1> /dev/null 2>&1; then \
        echo "ðŸ“œ Found certificate files, copying..."; \
        cp /tmp/build-context/*.crt /usr/local/share/ca-certificates/; \
        update-ca-certificates; \
    else \
        echo "ðŸ“œ No certificate files found"; \
    fi && \
    if [ -n "$HTTP_PROXY" ] || [ -n "$HTTPS_PROXY" ]; then \
        echo "ðŸ”§ Configuring npm for proxy environment..."; \
        npm config set strict-ssl false; \
        npm config set registry https://registry.npmjs.org/; \
    fi

# Copy package files vÃ  cÃ i Ä‘áº·t dependencies
RUN cp /tmp/build-context/package*.json ./ && \
    npm install --silent

# Copy toÃ n bá»™ source code tá»« temp location
RUN cp -r /tmp/build-context/src ./src && \
    cp -r /tmp/build-context/assets ./assets && \
    cp /tmp/build-context/*.json . && \
    cp /tmp/build-context/webpack.config.js . && \
    cp /tmp/build-context/babel.config.json . && \
    cp /tmp/build-context/manifest.xml . && \
    chown -R nodeuser:nodejs /app && \
    rm -rf /tmp/build-context

# Build á»©ng dá»¥ng
RUN npm run build

# Táº¡o thÆ° má»¥c cáº§n thiáº¿t cho certificates vÃ  set permissions
RUN mkdir -p /home/nodeuser/.office-addin-dev-certs && \
    chown -R nodeuser:nodejs /home/nodeuser/.office-addin-dev-certs && \
    chown -R nodeuser:nodejs /app

# Chuyá»ƒn sang user non-root
USER nodeuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1

# Expose port
EXPOSE 3000

# Sá»­ dá»¥ng dumb-init Ä‘á»ƒ handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["npm", "run", "dev-server"]
